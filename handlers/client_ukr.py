import os
import openai
openai.api_key = os.getenv('OPENAI_API_KEY')

from create_bot import dp, bot
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Dispatcher
from aiogram.types import ReplyKeyboardRemove, Message, CallbackQuery
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext


from keyboards.keyboards_ukr import menu_kb, in_text_davinci_003_kb, model_settings_kb, max_length_kb, temperature_replykeyboard, temperature_inlinekeyboard, language_kb, model_kb, return_kb, in_gpt_turbo_kb


from data_base.sqlite_db import Database, All_states

class Form(StatesGroup):
  in_gpt_turbo_ukr = State()
  in_text_davinci_003_ukr = State()
  in_model_settings_ukr = State()
  in_choose_model_ukr = State()
  in_max_length_ukr = State()
  in_temperature_ukr = State()



db = Database('user_settings.db')


                     ### Chat with Sparky ###
#@dp.message_handler(Text(equals='Chat with Sparkie'))
async def chat_with_sparkie_ukr(message: Message):
  user_id = message.from_user.id
  model = get_model(db, user_id)
  if model == 'gpt-3.5-turbo':
    await Form.in_gpt_turbo_ukr.set()
    reply_markup = in_gpt_turbo_kb
  elif model == 'text-davinci-003':
    await Form.in_text_davinci_003_ukr.set()
    reply_markup = in_text_davinci_003_kb
  await bot.send_message(user_id, "–í—ñ—Ç–∞—é —É —á–∞—Ç—ñ. –°—Ñ–æ—Ä–º—É–ª—é–π—Ç–µ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è —ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –º–µ–Ω—ñ. –ë—É–¥—å—Ç–µ —É–≤–∞–∂–Ω—ñ –¥–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω—ñ–≤, —è–∫—ñ —î –Ω–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É.", reply_markup=reply_markup)


                ### in_gpt_turbo  handler ###
#@dp.message_handler(state=Form.in_gpt_turbo_ukr)
async def in_gpt_turbo_ukr(message: Message, state: FSMContext):
  user_id = message.from_user.id
  if message.text == '‚¨ÖÔ∏è':
    await state.finish()
    await bot.send_message(user_id, "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π:", reply_markup=menu_kb)
  elif message.text == "üïπ\n–û–±—Ä–∞—Ç–∏ –º–æ–¥–µ–ª—å":
    await Form.in_choose_model_ukr.set()
    await bot.send_message(user_id, f"–í–∞—à–∞ –ø–æ—Ç–æ—á–Ω–∞ –º–æ–¥–µ–ª—å - —Ü–µ {get_model(db, user_id)}.", reply_markup=return_kb)
    await bot.send_message(user_id, "–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π:", reply_markup=model_kb)
  else:
    try:
      completion = openai.ChatCompletion.create(
      model="gpt-3.5-turbo",
      messages=[
      {"role": "user", "content": f"{message.text}\n"}
      ]
      )
      await bot.send_message(user_id, completion["choices"][0]["message"]["content"])
      tokens = get_token_balance(db, user_id)
      num_tokens_used = completion["usage"]["total_tokens"]
      print('\nnum_tokens_used:' ,num_tokens_used)
      subtract_tokens(db, user_id, num_tokens_used)
      await bot.send_message(user_id, f"–ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω—ñ–≤: {tokens-num_tokens_used}")
    except Exception as e:
      await bot.send_message(user_id, "–ü—ñ–¥ —á–∞—Å –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –º–æ–¥–µ–ª–ª—é –≤–∏—è–≤–∏–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
      print(e)
    

              ### in_text_davinci_003 handler ###
#@dp.message_handler(state=Form.in_text_davinci_003_ukr)
async def in_text_davinci_003_ukr(message: Message, state: FSMContext):
  user_id = message.from_user.id
  if message.text == '‚¨ÖÔ∏è':
    await state.finish()
    await bot.send_message(user_id, "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π:", reply_markup=menu_kb)
  elif message.text == "‚öôÔ∏è\n–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ":
    await Form.in_model_settings_ukr.set()
    await bot.send_message(user_id, "–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω–µ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:", reply_markup=model_settings_kb)
  elif message.text == "üïπ\n–û–±—Ä–∞—Ç–∏ –º–æ–¥–µ–ª—å":
    await Form.in_choose_model_ukr.set()
    await bot.send_message(user_id, f"–í–∞—à–∞ –ø–æ—Ç–æ—á–Ω–∞ –º–æ–¥–µ–ª—å - —Ü–µ {get_model(db, user_id)}.", reply_markup=return_kb)
    await bot.send_message(user_id, f"–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π:", reply_markup=model_kb)
  else:
    try:
### check if user's token balance is less than the max length ###
      tokens, max_length, temperature = get_text_davinci_003_settings(db, user_id)
      print(tokens, max_length, temperature)
      if tokens < max_length:
        await bot.send_message(user_id, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–∞ —Ä–∞—Ö—É–Ω–∫—É: {tokens}")
        return
      completion = openai.Completion.create(
      engine="text-davinci-003",
      prompt=(f"{message.text}\n"),
      max_tokens=max_length,
      n = 1,
      stop=None,
      temperature=temperature,
      )
      await bot.send_message(user_id, completion["choices"][0]["text"])
      num_tokens_used = completion["usage"]["total_tokens"]
      print('num_tokens_used:' ,num_tokens_used)
      subtract_tokens(db, user_id, num_tokens_used)
      await bot.send_message(user_id, f"–ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω—ñ–≤: {tokens-num_tokens_used}")
    except Exception as e:
      await bot.send_message(user_id, "–ü—ñ–¥ —á–∞—Å –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –º–æ–¥–µ–ª–ª—é –≤–∏—è–≤–∏–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
      print(e)

             ### In_prompt_settings handler ###
#@dp.message_handler(state=Form.in_model_settings_ukr)
async def in_prompt_settings_ukr(message: Message, state: FSMContext):
  user_id = message.from_user.id
  if message.text == '‚¨ÖÔ∏è':
    await Form.in_text_davinci_003_ukr.set()
    await bot.send_message(user_id, "–í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.", reply_markup=in_text_davinci_003_kb)
  elif message.text == '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞':
    await Form.in_max_length_ukr.set()
    current_max_length = get_max_length(db, user_id)
    await bot.send_message(user_id, f"–í–∞—à–∞ –ø–æ—Ç–æ—á–Ω–∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –î–æ–≤–∂–∏–Ω–∞ —Å–∫–ª–∞–¥–∞—î: {current_max_length}.\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—É –¥–æ–≤–∂–∏–Ω—É:", reply_markup=max_length_kb)
  elif message.text == '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞':
    await Form.in_temperature_ukr.set()
    current_temperature = get_temperature(db, user_id)
    await bot.send_message(user_id, f"–í–∞—à–∞ –ø–æ—Ç–æ—á–Ω–∞ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å: {current_temperature}.", reply_markup=temperature_replykeyboard)
    await bot.send_message(user_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è:", reply_markup=temperature_inlinekeyboard)

                ### Processing Max_length ###
#@dp.message_handler(state=Form.in_max_length_ukr)
async def in_max_length_ukr(message: Message, state: FSMContext):
  user_id = message.from_user.id
  try:
    max_length = int(message.text)
    if max_length > 4097:
      await bot.send_message(user_id, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –¥–ª—è —Ü—ñ—î—ó –º–æ–¥–µ–ª—ñ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å 4097 —Ç–æ–∫–µ–Ω—ñ–≤, —è–∫—ñ —Ä–æ–∑–ø–æ–¥—ñ–ª—è—é—Ç—å—Å—è –º—ñ–∂ –≤—Ö—ñ–¥–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.")
    elif  max_length < 1:
      await bot.send_message(user_id, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à–æ—é –∑–∞ 1.")
    else:
      update_max_length(db, user_id, max_length)
      await Form.in_model_settings_ukr.set()
      await bot.send_message(user_id, f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {max_length}.", reply_markup=model_settings_kb)
  except ValueError:
    if message.text == '‚¨ÖÔ∏è':
      await Form.in_model_settings_ukr.set()
      await bot.send_message(user_id, "–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω–µ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:", reply_markup=model_settings_kb)
    elif message.text == "ÔøΩ":
      user_id = message.from_user.id
      current_max_length = get_max_length(db, user_id)
      await bot.send_message(user_id, f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ - —Ü–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤, —â–æ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –∑–∞ —Ä–∞–∑. –û–¥–∏–Ω —Ç–æ–∫–µ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—Ä–∏–±–ª–∏–∑–Ω–æ 4 —Å–∏–º–≤–æ–ª–∞–º –¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É.\n–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–æ 4097 —Ç–æ–∫–µ–Ω—ñ–≤, —è–∫—ñ —Ä–æ–∑–ø–æ–¥—ñ–ª—è—é—Ç—å—Å—è –º—ñ–∂ –≤—Ö—ñ–¥–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.\n\n–í–∞—à–∞ –ø–æ—Ç–æ—á–Ω–∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –î–æ–≤–∂–∏–Ω–∞ —Å–∫–ª–∞–¥–∞—î: {current_max_length}\n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–µ –≤–∞–º –∑–Ω–∞—á–µ–Ω–Ω—è:", reply_markup=max_length_kb)
    else:
      await bot.send_message(user_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")

                ### In_temperature inline handler ###
#@dp.callback_query_handler(lambda c: c.data in ["0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0"], state = Form.in_temperature_ukr)
async def in_temperature_inline_ukr(callback_query: CallbackQuery, state: FSMContext):
  user_id = callback_query.from_user.id
  temperature = float(callback_query.data)
  if 0 <= temperature <= 1:
    update_temperature(db, user_id, temperature)
    await Form.in_model_settings_ukr.set()
    await bot.send_message(user_id, f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –±—É–ª–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Ä—ñ–≤–Ω—ñ: {temperature}.", reply_markup=model_settings_kb)

    
              ### In_temperature reply handler ###
#@dp.message_handler(state=Form.in_temperature_ukr)
async def in_temperature_reply_ukr(message: Message, state: FSMContext):
  user_id = message.from_user.id
  try:
    temperature = float(message.text)
    if 0 <= temperature <= 1:
      update_temperature(db, user_id, temperature)
      await Form.in_model_settings_ukr.set()
      await bot.send_message(user_id, f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –±—É–ª–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Ä—ñ–≤–Ω—ñ {temperature}.", reply_markup=model_settings_kb)
    else:
      raise ValueError
  except ValueError:
    if message.text == "‚¨ÖÔ∏è":
      await Form.in_model_settings_ukr.set()
      await bot.send_message(user_id, "–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω–µ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:", reply_markup=model_settings_kb)
    elif message.text == "ÔøΩ":
      current_temperature = get_temperature(db, user_id)
      await bot.send_message(user_id, f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é—î –∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ç–∞ –≤–∏–ø–∞–¥–∫–æ–≤—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π, —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –ª—ñ–Ω–≥–≤—ñ—Å—Ç–∏—á–Ω–æ—é –º–æ–¥–µ–ª–ª—é. –ù–∏–∑—å–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ –±—ñ–ª—å—à –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∏—Ö —Ç–∞ –¥–µ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π, —Ç–æ–¥—ñ —è–∫ –≤–∏—â–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å—Ç–≤–æ—Ä–∏—Ç—å –±—ñ–ª—å—à —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ —Ç–∞ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –º–æ–∂–Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –±–∞–∂–∞–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –ª–æ–≥—ñ—á–Ω–æ—ó –∑–≤'—è–∑–Ω–æ—Å—Ç—ñ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∑–∞–¥–∞—á—ñ\n\n–í–∞—à–∞ –ø–æ—Ç–æ—á–Ω–∞ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å: {current_temperature}. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–µ –≤–∞–º –∑–Ω–∞—á–µ–Ω–Ω—è:", reply_markup=temperature_inlinekeyboard)
    else:
      await bot.send_message(user_id, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º –≤—ñ–¥ 0 –¥–æ 1.", reply_markup=temperature_inlinekeyboard)
    


              ### In choose model inline keyboard ###
#@dp.callback_query_handler(lambda c: c.data in ["gpt-3.5-turbo", "text-davinci-003"], state = Form.in_choose_model_ukr)
async def in_choose_model_inline_ukr(callback_query: CallbackQuery, state: FSMContext):
  user_id = callback_query.from_user.id
  model = callback_query.data
  reply_markup = None
  if model == "gpt-3.5-turbo":
    change_model(db, user_id, model)
    await Form.in_gpt_turbo_ukr.set()
    reply_markup = in_gpt_turbo_kb
  elif model == 'text-davinci-003':
    change_model(db, user_id, model)
    await Form.in_text_davinci_003_ukr.set()
    reply_markup = in_text_davinci_003_kb
  await bot.send_message(user_id, f"–ú–æ–¥–µ–ª—å –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {model}. –í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.", reply_markup=reply_markup)


              ### In choose model reply keyboard ###
#@dp.message_handler(state=Form.in_choose_model_ukr)
async def in_choose_model_reply_ukr(message: Message, state: FSMContext):
  user_id = message.from_user.id
  current_model = get_model(db, user_id)
  if message.text == '‚¨ÖÔ∏è':
    if current_model == "gpt-3.5-turbo":
      chat_keyboard = in_gpt_turbo_kb
      await Form.in_gpt_turbo_ukr.set()
    elif current_model == "text-davinci-003":
      chat_keyboard = in_text_davinci_003_kb
      await Form.in_text_davinci_003_ukr.set()
    await bot.send_message(user_id, "–í—ñ—Ç–∞—é —É —á–∞—Ç—ñ. –°—Ñ–æ—Ä–º—É–ª—é–π—Ç–µ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è —ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –º–µ–Ω—ñ. –ë—É–¥—å—Ç–µ —É–≤–∞–∂–Ω—ñ –¥–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω—ñ–≤, —è–∫—ñ —î –Ω–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É.", reply_markup=chat_keyboard)
  elif message.text == 'ÔøΩ':
    await bot.send_message(user_id, "–ú–æ–¥–µ–ª—ñ GPT-3.5 –º–æ–∂—É—Ç—å —Ä–æ–∑—É–º—ñ—Ç–∏ —Ç–∞ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—É –º–æ–≤—É –∞–±–æ –∫–æ–¥.\n\nü§ñ  gpt-3.5-turbo - –ù–∞–π–ø–æ—Ç—É–∂–Ω—ñ—à–∞ –º–æ–¥–µ–ª—å GPT-3.5 —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –¥–ª—è —á–∞—Ç—ñ–≤ –∑–∞ 1/10 –≤—ñ–¥ –≤–∞—Ä—Ç–æ—Å—Ç—ñ text-davinci-003.\n\nü§ñ  text-davinci-003 - –ú–æ–∂–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç—å –±—É–¥—å —è–∫–µ –ª—ñ–Ω–≥–≤—ñ—Å—Ç–∏—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ –Ω–∞–¥–∞—î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É —Ç–∞ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É.", reply_markup=return_kb)
    
  
  
    
    


        
    


  

#@dp.message_handler(commands=['/Create_content'])
async def command_create_content_ukr(message: Message):
  await bot.send_message(message.from_user.id, 'Choose one of the provided publishing styles or click the button "Your content"', reply_markup=choose_content_type_kb)

#@dp.message_handler(commands=['/Generate_a_picture'])
async def generate_a_picture_ukr(message: Message):
  await bot.send_message(message.from_user.id, '–û–ø–∏—à—ñ—Ç—å, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏, –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –Ω–∞—à–∏–º –ø–æ—Å—ñ–±–Ω–∏–∫–æ–º –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É–≤–∞–Ω–Ω—è, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.')


  

                       ### Registering Handlers ###
def register_handlers_client_UKR(dp : Dispatcher):
  dp.register_message_handler(chat_with_sparkie_ukr, Text(equals='üí¨ –ß–∞—Ç –∑—ñ Sparky'))
  dp.register_message_handler(in_gpt_turbo_ukr, state=Form.in_gpt_turbo_ukr)
  dp.register_message_handler(in_text_davinci_003_ukr, state=Form.in_text_davinci_003_ukr)
  dp.register_message_handler(in_prompt_settings_ukr, state=Form.in_model_settings_ukr)
  dp.register_message_handler(in_max_length_ukr, state=Form.in_max_length_ukr)
  dp.register_callback_query_handler(in_temperature_inline_ukr, lambda c: c.data in ["0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0"], state=Form.in_temperature_ukr)
  dp.register_message_handler(in_temperature_reply_ukr, state=Form.in_temperature_ukr)
  dp.register_callback_query_handler(in_choose_model_inline_ukr, lambda c: c.data in ["gpt-3.5-turbo", "text-davinci-003"], state=Form.in_choose_model_ukr)
  dp.register_message_handler(in_choose_model_reply_ukr, state=Form.in_choose_model_ukr)
  dp.register_message_handler(generate_a_picture_ukr, Text(equals='üñºÔ∏è –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è'))
  #dp.register_message_handler(command_create_content_ukr, Text(equals='Create content'))
  


      ### callback query handler to handle the callback data sent by the inline buttons when "Create content" is pressed ###
  
@dp.callback_query_handler(lambda c: c.data in ["post", "article", "story", "business letter", "commercial", "your content"])
async def process_create_content_ukr(callback_query: CallbackQuery):
    data = callback_query.data
    if data == "post":
        # Do something for button 1
        await callback_query.answer("Button Post pressed")
    elif data == "article":
        # Do something for button 2
        await callback_query.answer("Button Article pressed")
    elif data == "story":
        # Do something for button 2
        await callback_query.answer("Button Story pressed")
    elif data == "business letter":
        # Do something for button 2
        await callback_query.answer("Button Business letter pressed")
    elif data == "commercial":
        # Do something for button 2
        await callback_query.answer("Button Commercial pressed")
    elif data == "your content":
        # Do something for button 2
        await callback_query.answer("Button Your content pressed")


